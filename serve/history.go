package serve

import (
	"fmt"
	"html/template"
	"net/http"
	"os"
	"strconv"
	"strings"

	"github.com/direct-dev-ru/linux-command-gpt/config"
	"github.com/direct-dev-ru/linux-command-gpt/serve/templates"
	"github.com/russross/blackfriday/v2"
)

// HistoryEntryInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
type HistoryEntryInfo struct {
	Index     int
	Command   string
	Response  string
	Timestamp string
}

// handleHistoryPage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
func handleHistoryPage(w http.ResponseWriter, r *http.Request) {
	historyEntries, err := readHistoryEntries()
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err), http.StatusInternalServerError)
		return
	}

	tmpl := templates.HistoryPageTemplate

	t, err := template.New("history").Parse(tmpl)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}

	data := struct {
		Entries []HistoryEntryInfo
	}{
		Entries: historyEntries,
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	t.Execute(w, data)
}

// readHistoryEntries —á–∏—Ç–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
func readHistoryEntries() ([]HistoryEntryInfo, error) {
	entries, err := Read(config.AppConfig.ResultHistory)
	if err != nil {
		return nil, err
	}

	var result []HistoryEntryInfo
	for _, entry := range entries {
		result = append(result, HistoryEntryInfo{
			Index:     entry.Index,
			Command:   entry.Command,
			Response:  entry.Response,
			Timestamp: entry.Timestamp.Format("02.01.2006 15:04:05"),
		})
	}

	return result, nil
}

// handleDeleteHistoryEntry –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
func handleDeleteHistoryEntry(w http.ResponseWriter, r *http.Request) {
	if r.Method != "DELETE" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	indexStr := strings.TrimPrefix(r.URL.Path, "/history/delete/")
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		http.Error(w, "Invalid index", http.StatusBadRequest)
		return
	}

	err = DeleteHistoryEntry(config.AppConfig.ResultHistory, index)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v", err), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"))
}

// handleClearHistory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
func handleClearHistory(w http.ResponseWriter, r *http.Request) {
	if r.Method != "DELETE" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	err := os.WriteFile(config.AppConfig.ResultHistory, []byte("[]"), 0644)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: %v", err), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞"))
}

// handleHistoryView –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
func handleHistoryView(w http.ResponseWriter, r *http.Request) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ URL
	indexStr := strings.TrimPrefix(r.URL.Path, "/history/view/")
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		http.NotFound(w, r)
		return
	}

	// –ß–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
	entries, err := Read(config.AppConfig.ResultHistory)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err), http.StatusInternalServerError)
		return
	}

	// –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å –Ω—É–∂–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
	var targetEntry *HistoryEntry
	for _, entry := range entries {
		if entry.Index == index {
			targetEntry = &entry
			break
		}
	}

	if targetEntry == nil {
		http.NotFound(w, r)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	explanationSection := ""
	if strings.TrimSpace(targetEntry.Explanation) != "" {
		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
		explanationHTML := blackfriday.Run([]byte(targetEntry.Explanation))
		explanationSection = fmt.Sprintf(`
			<div class="history-explanation">
				<h3>üìñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:</h3>
				<div class="history-explanation-content">%s</div>
			</div>`, string(explanationHTML))
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
	data := struct {
		Index           int
		Timestamp       string
		Command         string
		Response        string
		ExplanationHTML template.HTML
	}{
		Index:           index,
		Timestamp:       targetEntry.Timestamp.Format("02.01.2006 15:04:05"),
		Command:         targetEntry.Command,
		Response:        targetEntry.Response,
		ExplanationHTML: template.HTML(explanationSection),
	}

	// –ü–∞—Ä—Å–∏–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —à–∞–±–ª–æ–Ω
	tmpl := templates.HistoryViewTemplate
	t, err := template.New("history_view").Parse(tmpl)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	t.Execute(w, data)
}
