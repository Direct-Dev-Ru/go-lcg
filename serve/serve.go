package serve

import (
	"crypto/tls"
	"fmt"
	"net/http"
	"os"
	"strings"

	"github.com/direct-dev-ru/linux-command-gpt/config"
	"github.com/direct-dev-ru/linux-command-gpt/ssl"
)

// makePath —Å–æ–∑–¥–∞–µ—Ç –ø—É—Ç—å —Å —É—á–µ—Ç–æ–º BasePath
func makePath(path string) string {
	basePath := config.AppConfig.Server.BasePath
	if basePath == "" || basePath == "/" {
		return path
	}

	// –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –≤ –∫–æ–Ω—Ü–µ basePath –µ—Å–ª–∏ –µ—Å—Ç—å
	basePath = strings.TrimSuffix(basePath, "/")

	// –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –≤ –Ω–∞—á–∞–ª–µ path –µ—Å–ª–∏ –µ—Å—Ç—å
	path = strings.TrimPrefix(path, "/")

	// –ï—Å–ª–∏ path –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º basePath —Å —Å–ª—ç—à–µ–º –≤ –∫–æ–Ω—Ü–µ
	if path == "" {
		return basePath + "/"
	}

	return basePath + "/" + path
}

// getBasePath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BasePath –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —à–∞–±–ª–æ–Ω–∞—Ö
func getBasePath() string {
	basePath := config.AppConfig.Server.BasePath
	if basePath == "" || basePath == "/" {
		return ""
	}
	return strings.TrimSuffix(basePath, "/")
}

// StartResultServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP/HTTPS —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func StartResultServer(host, port string) error {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CSRF –º–µ–Ω–µ–¥–∂–µ—Ä
	if err := InitCSRFManager(); err != nil {
		return fmt.Errorf("failed to initialize CSRF manager: %v", err)
	}

	addr := fmt.Sprintf("%s:%s", host, port)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTTPS
	useHTTPS := ssl.ShouldUseHTTPS(host)

	if useHTTPS {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º HTTPS –º–∞—Ä—à—Ä—É—Ç—ã (–≤–∫–ª—é—á–∞—è —Ä–µ–¥–∏—Ä–µ–∫—Ç)
		registerHTTPSRoutes()

		// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
		sslDir := fmt.Sprintf("%s/server/ssl", config.AppConfig.Server.ConfigFolder)
		if err := os.MkdirAll(sslDir, 0755); err != nil {
			return fmt.Errorf("failed to create SSL directory: %v", err)
		}

		// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
		cert, err := ssl.LoadOrGenerateCert(host)
		if err != nil {
			return fmt.Errorf("failed to load/generate SSL certificate: %v", err)
		}

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º TLS
		tlsConfig := &tls.Config{
			Certificates: []tls.Certificate{*cert},
			MinVersion:   tls.VersionTLS12,
			MaxVersion:   tls.VersionTLS13,
			// –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
			ClientAuth: tls.NoClientCert,
			// –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
			GetCertificate: func(clientHello *tls.ClientHelloInfo) (*tls.Certificate, error) {
				if config.AppConfig.MainFlags.Debug {
					fmt.Printf("üîç TLS –∑–∞–ø—Ä–æ—Å –æ—Ç %s (SNI: %s)\n", clientHello.Conn.RemoteAddr(), clientHello.ServerName)
				}
				return cert, nil
			},
		}

		// –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
		server := &http.Server{
			Addr:      addr,
			TLSConfig: tlsConfig,
		}

		fmt.Printf("üîí –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ https://%s (SSL –≤–∫–ª—é—á–µ–Ω)\n", addr)
		fmt.Println("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

		// –¢–µ—Å—Ç–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ debug —Ñ–ª–∞–≥–∞
		if config.AppConfig.MainFlags.Debug {
			fmt.Printf("üîç DEBUG –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù - –≤–µ–±-–æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è\n")
		} else {
			fmt.Printf("üîç DEBUG –†–ï–ñ–ò–ú –û–¢–ö–õ–Æ–ß–ï–ù - –≤–µ–±-–æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è\n")
		}

		return server.ListenAndServeTLS("", "")
	} else {
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è HTTP
		registerRoutes()

		fmt.Printf("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://%s (HTTP —Ä–µ–∂–∏–º)\n", addr)
		fmt.Println("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

		// –¢–µ—Å—Ç–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ debug —Ñ–ª–∞–≥–∞
		if config.AppConfig.MainFlags.Debug {
			fmt.Printf("üîç DEBUG –†–ï–ñ–ò–ú –í–ö–õ–Æ–ß–ï–ù - –≤–µ–±-–æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è\n")
		} else {
			fmt.Printf("üîç DEBUG –†–ï–ñ–ò–ú –û–¢–ö–õ–Æ–ß–ï–ù - –≤–µ–±-–æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–µ –±—É–¥—É—Ç –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è\n")
		}

		return http.ListenAndServe(addr, nil)
	}
}

// handleHTTPSRedirect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç —Å HTTP –Ω–∞ HTTPS
func handleHTTPSRedirect(w http.ResponseWriter, r *http.Request) {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ —Ö–æ—Å—Ç
	host := r.Host
	if host == "" {
		host = r.Header.Get("Host")
	}

	// –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ HTTPS
	httpsURL := fmt.Sprintf("https://%s%s", host, r.RequestURI)
	http.Redirect(w, r, httpsURL, http.StatusMovedPermanently)
}

// registerHTTPSRoutes —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è HTTPS —Å–µ—Ä–≤–µ—Ä–∞
func registerHTTPSRoutes() {
	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	registerRoutesExceptHome()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π HTTPS
	http.HandleFunc(makePath("/"), func(w http.ResponseWriter, r *http.Request) {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ HTTP (–Ω–µ HTTPS)
		if r.TLS == nil {
			handleHTTPSRedirect(w, r)
			return
		}
		// –ï—Å–ª–∏ —É–∂–µ HTTPS, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
		AuthMiddleware(handleResultsPage)(w, r)
	})

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ —Å–ª—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ –¥–ª—è BasePath
	basePath := config.AppConfig.Server.BasePath
	if basePath != "" && basePath != "/" {
		basePath = strings.TrimSuffix(basePath, "/")
		http.HandleFunc(basePath, func(w http.ResponseWriter, r *http.Request) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ HTTP (–Ω–µ HTTPS)
			if r.TLS == nil {
				handleHTTPSRedirect(w, r)
				return
			}
			// –ï—Å–ª–∏ —É–∂–µ HTTPS, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
			AuthMiddleware(handleResultsPage)(w, r)
		})
	}
}

// registerRoutesExceptHome —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –∫—Ä–æ–º–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
func registerRoutesExceptHome() {
	// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
	http.HandleFunc(makePath("/login"), handleLoginPage)

	// API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
	http.HandleFunc(makePath("/api/login"), handleLogin)
	http.HandleFunc(makePath("/api/logout"), handleLogout)
	http.HandleFunc(makePath("/api/validate-token"), handleValidateToken)

	// –§–∞–π–ª—ã
	http.HandleFunc(makePath("/file/"), AuthMiddleware(handleFileView))
	http.HandleFunc(makePath("/delete/"), AuthMiddleware(handleDeleteFile))

	// –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	http.HandleFunc(makePath("/history"), AuthMiddleware(handleHistoryPage))
	http.HandleFunc(makePath("/history/view/"), AuthMiddleware(handleHistoryView))
	http.HandleFunc(makePath("/history/delete/"), AuthMiddleware(handleDeleteHistoryEntry))
	http.HandleFunc(makePath("/history/clear"), AuthMiddleware(handleClearHistory))

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
	http.HandleFunc(makePath("/prompts"), AuthMiddleware(handlePromptsPage))
	http.HandleFunc(makePath("/prompts/add"), AuthMiddleware(handleAddPrompt))
	http.HandleFunc(makePath("/prompts/edit/"), AuthMiddleware(handleEditPrompt))
	http.HandleFunc(makePath("/prompts/edit-verbose/"), AuthMiddleware(handleEditVerbosePrompt))
	http.HandleFunc(makePath("/prompts/delete/"), AuthMiddleware(handleDeletePrompt))
	http.HandleFunc(makePath("/prompts/restore/"), AuthMiddleware(handleRestorePrompt))
	http.HandleFunc(makePath("/prompts/restore-verbose/"), AuthMiddleware(handleRestoreVerbosePrompt))
	http.HandleFunc(makePath("/prompts/save-lang"), AuthMiddleware(handleSaveLang))

	// –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	http.HandleFunc(makePath("/run"), AuthMiddleware(CSRFMiddleware(handleExecutePage)))

	// API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	http.HandleFunc(makePath("/api/execute"), AuthMiddleware(CSRFMiddleware(handleExecute)))
	// API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏
	http.HandleFunc(makePath("/api/save-result"), AuthMiddleware(CSRFMiddleware(handleSaveResult)))
	http.HandleFunc(makePath("/api/add-to-history"), AuthMiddleware(CSRFMiddleware(handleAddToHistory)))
}

// registerRoutes —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
func registerRoutes() {
	// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
	http.HandleFunc(makePath("/login"), handleLoginPage)

	// API –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
	http.HandleFunc(makePath("/api/login"), handleLogin)
	http.HandleFunc(makePath("/api/logout"), handleLogout)
	http.HandleFunc(makePath("/api/validate-token"), handleValidateToken)

	// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏ —Ñ–∞–π–ª—ã
	http.HandleFunc(makePath("/"), AuthMiddleware(handleResultsPage))
	http.HandleFunc(makePath("/file/"), AuthMiddleware(handleFileView))
	http.HandleFunc(makePath("/delete/"), AuthMiddleware(handleDeleteFile))

	// –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	http.HandleFunc(makePath("/history"), AuthMiddleware(handleHistoryPage))
	http.HandleFunc(makePath("/history/view/"), AuthMiddleware(handleHistoryView))
	http.HandleFunc(makePath("/history/delete/"), AuthMiddleware(handleDeleteHistoryEntry))
	http.HandleFunc(makePath("/history/clear"), AuthMiddleware(handleClearHistory))

	// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞–º–∏
	http.HandleFunc(makePath("/prompts"), AuthMiddleware(handlePromptsPage))
	http.HandleFunc(makePath("/prompts/add"), AuthMiddleware(handleAddPrompt))
	http.HandleFunc(makePath("/prompts/edit/"), AuthMiddleware(handleEditPrompt))
	http.HandleFunc(makePath("/prompts/edit-verbose/"), AuthMiddleware(handleEditVerbosePrompt))
	http.HandleFunc(makePath("/prompts/delete/"), AuthMiddleware(handleDeletePrompt))
	http.HandleFunc(makePath("/prompts/restore/"), AuthMiddleware(handleRestorePrompt))
	http.HandleFunc(makePath("/prompts/restore-verbose/"), AuthMiddleware(handleRestoreVerbosePrompt))
	http.HandleFunc(makePath("/prompts/save-lang"), AuthMiddleware(handleSaveLang))

	// –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	http.HandleFunc(makePath("/run"), AuthMiddleware(CSRFMiddleware(handleExecutePage)))

	// API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	http.HandleFunc(makePath("/api/execute"), AuthMiddleware(CSRFMiddleware(handleExecute)))
	// API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏
	http.HandleFunc(makePath("/api/save-result"), AuthMiddleware(CSRFMiddleware(handleSaveResult)))
	http.HandleFunc(makePath("/api/add-to-history"), AuthMiddleware(CSRFMiddleware(handleAddToHistory)))

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –±–µ–∑ —Å–ª—ç—à–∞ –≤ –∫–æ–Ω—Ü–µ –¥–ª—è BasePath
	basePath := config.AppConfig.Server.BasePath
	if basePath != "" && basePath != "/" {
		basePath = strings.TrimSuffix(basePath, "/")
		http.HandleFunc(basePath, AuthMiddleware(handleResultsPage))
	}
}
