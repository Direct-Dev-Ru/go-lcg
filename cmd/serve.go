package cmd

import (
	"encoding/json"
	"fmt"
	"html/template"
	"net/http"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/direct-dev-ru/linux-command-gpt/config"
	"github.com/direct-dev-ru/linux-command-gpt/gpt"
	"github.com/russross/blackfriday/v2"
)

// StartResultServer –∑–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func StartResultServer(host, port string) error {
	http.HandleFunc("/", handleResultsPage)
	http.HandleFunc("/file/", handleFileView)
	http.HandleFunc("/delete/", handleDeleteFile)
	http.HandleFunc("/history", handleHistoryPage)
	http.HandleFunc("/history/delete/", handleDeleteHistoryEntry)
	http.HandleFunc("/history/clear", handleClearHistory)
	http.HandleFunc("/prompts", handlePromptsPage)
	http.HandleFunc("/prompts/add", handleAddPrompt)
	http.HandleFunc("/prompts/edit/", handleEditPrompt)
	http.HandleFunc("/prompts/delete/", handleDeletePrompt)
	http.HandleFunc("/prompts/restore/", handleRestorePrompt)
	http.HandleFunc("/prompts/restore-verbose/", handleRestoreVerbosePrompt)
	http.HandleFunc("/prompts/save-lang", handleSaveLang)

	addr := fmt.Sprintf("%s:%s", host, port)
	fmt.Printf("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://%s\n", addr)
	fmt.Println("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

	return http.ListenAndServe(addr, nil)
}

// handleResultsPage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤
func handleResultsPage(w http.ResponseWriter, r *http.Request) {
	files, err := getResultFiles()
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: %v", err), http.StatusInternalServerError)
		return
	}

	tmpl := `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LCG Results - Linux Command GPT</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2d5016 0%, #4a7c59 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .header p {
            margin: 10px 0 0 0;
            opacity: 0.9;
            font-size: 1.1em;
        }
        .content {
            padding: 30px;
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: #f0f8f0;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border-left: 4px solid #2d5016;
        }
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #2d5016;
        }
        .stat-label {
            color: #666;
            margin-top: 5px;
        }
        .files-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        .file-card {
            background: white;
            border: 1px solid #e1e5e9;
            border-radius: 8px;
            padding: 20px;
            transition: all 0.3s ease;
            position: relative;
        }
        .file-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(45,80,22,0.2);
            border-color: #2d5016;
        }
        .file-card-content {
            cursor: pointer;
        }
        .file-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 8px;
        }
        .delete-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8em;
            transition: background 0.3s ease;
        }
        .delete-btn:hover {
            background: #c0392b;
        }
        .file-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
            font-size: 1.1em;
        }
        .file-info {
            color: #666;
            font-size: 0.9em;
            margin-bottom: 10px;
        }
        .file-preview {
            background: #f0f8f0;
            padding: 10px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.85em;
            color: #2d5016;
            max-height: 100px;
            overflow: hidden;
            border-left: 3px solid #2d5016;
        }
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        .empty-state h3 {
            color: #333;
            margin-bottom: 10px;
        }
        .nav-button {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1em;
            text-decoration: none;
            transition: background 0.3s ease;
            display: inline-block;
            text-align: center;
        }
        .nav-button:hover {
            background: #2980b9;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÄ LCG Results</h1>
            <p>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Linux Command GPT</p>
        </div>
        <div class="content">
            <div style="display: flex; gap: 10px; margin-bottom: 20px;">
                <button class="nav-button" onclick="location.reload()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
                <a href="/history" class="nav-button">üìù –ò—Å—Ç–æ—Ä–∏—è</a>
                <a href="/prompts" class="nav-button">‚öôÔ∏è –ü—Ä–æ–º–ø—Ç—ã</a>
            </div>
            
            <div class="stats">
                <div class="stat-card">
                    <div class="stat-number">{{.TotalFiles}}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤</div>
                </div>
                <div class="stat-card">
                    <div class="stat-number">{{.RecentFiles}}</div>
                    <div class="stat-label">–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</div>
                </div>
            </div>

            {{if .Files}}
            <div class="files-grid">
                {{range .Files}}
                <div class="file-card">
                    <div class="file-actions">
                        <button class="delete-btn" onclick="deleteFile('{{.Name}}')" title="–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª">üóëÔ∏è</button>
                    </div>
                    <div class="file-card-content" onclick="window.open('/file/{{.Name}}', '_blank')">
                        <div class="file-name">{{.Name}}</div>
                        <div class="file-info">
                            üìÖ {{.ModTime}} | üìè {{.Size}}
                        </div>
                        <div class="file-preview">{{.Preview}}</div>
                    </div>
                </div>
                {{end}}
            </div>
            {{else}}
            <div class="empty-state">
                <h3>üìÅ –ü–∞–ø–∫–∞ –ø—É—Å—Ç–∞</h3>
                <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã lcg</p>
            </div>
            {{end}}
        </div>
    </div>
    
    <script>
        function deleteFile(filename) {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª "' + filename + '"?\\n\\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
                fetch('/delete/' + encodeURIComponent(filename), {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
                });
            }
        }
    </script>
</body>
</html>`

	t, err := template.New("results").Parse(tmpl)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	recentCount := 0
	weekAgo := time.Now().AddDate(0, 0, -7)
	for _, file := range files {
		// –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
		if modTime, err := time.Parse("02.01.2006 15:04", file.ModTime); err == nil {
			if modTime.After(weekAgo) {
				recentCount++
			}
		}
	}

	data := struct {
		Files       []FileInfo
		TotalFiles  int
		RecentFiles int
	}{
		Files:       files,
		TotalFiles:  len(files),
		RecentFiles: recentCount,
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	t.Execute(w, data)
}

// FileInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
type FileInfo struct {
	Name    string
	Size    string
	ModTime string
	Preview string
}

// getResultFiles –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func getResultFiles() ([]FileInfo, error) {
	entries, err := os.ReadDir(config.AppConfig.ResultFolder)
	if err != nil {
		return nil, err
	}

	var files []FileInfo
	for _, entry := range entries {
		if entry.IsDir() || !strings.HasSuffix(entry.Name(), ".md") {
			continue
		}

		info, err := entry.Info()
		if err != nil {
			continue
		}

		// –ß–∏—Ç–∞–µ–º –ø—Ä–µ–≤—å—é —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown
		preview := ""
		if content, err := os.ReadFile(filepath.Join(config.AppConfig.ResultFolder, entry.Name())); err == nil {
			// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML –¥–ª—è –ø—Ä–µ–≤—å—é
			htmlContent := blackfriday.Run(content)
			preview = strings.TrimSpace(string(htmlContent))
			// –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
			preview = strings.ReplaceAll(preview, "<h1>", "")
			preview = strings.ReplaceAll(preview, "</h1>", "")
			preview = strings.ReplaceAll(preview, "<h2>", "")
			preview = strings.ReplaceAll(preview, "</h2>", "")
			preview = strings.ReplaceAll(preview, "<h3>", "")
			preview = strings.ReplaceAll(preview, "</h3>", "")
			preview = strings.ReplaceAll(preview, "<p>", "")
			preview = strings.ReplaceAll(preview, "</p>", "")
			preview = strings.ReplaceAll(preview, "<code>", "")
			preview = strings.ReplaceAll(preview, "</code>", "")
			preview = strings.ReplaceAll(preview, "<pre>", "")
			preview = strings.ReplaceAll(preview, "</pre>", "")
			preview = strings.ReplaceAll(preview, "<strong>", "")
			preview = strings.ReplaceAll(preview, "</strong>", "")
			preview = strings.ReplaceAll(preview, "<em>", "")
			preview = strings.ReplaceAll(preview, "</em>", "")
			preview = strings.ReplaceAll(preview, "<ul>", "")
			preview = strings.ReplaceAll(preview, "</ul>", "")
			preview = strings.ReplaceAll(preview, "<li>", "‚Ä¢ ")
			preview = strings.ReplaceAll(preview, "</li>", "")
			preview = strings.ReplaceAll(preview, "<ol>", "")
			preview = strings.ReplaceAll(preview, "</ol>", "")
			preview = strings.ReplaceAll(preview, "<blockquote>", "")
			preview = strings.ReplaceAll(preview, "</blockquote>", "")
			preview = strings.ReplaceAll(preview, "<br>", "")
			preview = strings.ReplaceAll(preview, "<br/>", "")
			preview = strings.ReplaceAll(preview, "<br />", "")

			// –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
			preview = strings.ReplaceAll(preview, "\n", " ")
			preview = strings.ReplaceAll(preview, "\r", "")
			preview = strings.ReplaceAll(preview, "  ", " ")
			preview = strings.TrimSpace(preview)

			if len(preview) > 200 {
				preview = preview[:200] + "..."
			}
		}

		files = append(files, FileInfo{
			Name:    entry.Name(),
			Size:    formatFileSize(info.Size()),
			ModTime: info.ModTime().Format("02.01.2006 15:04"),
			Preview: preview,
		})
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
	for i := 0; i < len(files)-1; i++ {
		for j := i + 1; j < len(files); j++ {
			if files[i].ModTime < files[j].ModTime {
				files[i], files[j] = files[j], files[i]
			}
		}
	}

	return files, nil
}

// formatFileSize —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func formatFileSize(size int64) string {
	const unit = 1024
	if size < unit {
		return fmt.Sprintf("%d B", size)
	}
	div, exp := int64(unit), 0
	for n := size / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(size)/float64(div), "KMGTPE"[exp])
}

// handleFileView –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
func handleFileView(w http.ResponseWriter, r *http.Request) {
	filename := strings.TrimPrefix(r.URL.Path, "/file/")
	if filename == "" {
		http.NotFound(w, r)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	filePath := filepath.Join(config.AppConfig.ResultFolder, filename)
	if !strings.HasPrefix(filePath, config.AppConfig.ResultFolder) {
		http.NotFound(w, r)
		return
	}

	content, err := os.ReadFile(filePath)
	if err != nil {
		http.NotFound(w, r)
		return
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Markdown –≤ HTML
	htmlContent := blackfriday.Run(content)

	// –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	htmlPage := fmt.Sprintf(`
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>%s - LCG Results</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #56ab2f 0%%, #a8e6cf 100%%);
            min-height: 100vh;
        }
        .container {
            max-width: 1000px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2d5016 0%%, #4a7c59 100%%);
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .header h1 {
            margin: 0;
            font-size: 1.5em;
            font-weight: 300;
        }
        .back-btn {
            background: rgba(255,255,255,0.2);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            text-decoration: none;
            transition: background 0.3s ease;
        }
        .back-btn:hover {
            background: rgba(255,255,255,0.3);
        }
        .content {
            padding: 30px;
            line-height: 1.6;
        }
        .content h1 {
            color: #2d5016;
            border-bottom: 2px solid #2d5016;
            padding-bottom: 10px;
        }
        .content h2 {
            color: #4a7c59;
            margin-top: 30px;
        }
        .content h3 {
            color: #2d5016;
        }
        .content code {
            background: #f0f8f0;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', monospace;
            color: #2d5016;
            border: 1px solid #a8e6cf;
        }
        .content pre {
            background: #f0f8f0;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #2d5016;
            overflow-x: auto;
        }
        .content pre code {
            background: none;
            padding: 0;
            border: none;
            color: #2d5016;
        }
        .content blockquote {
            border-left: 4px solid #4a7c59;
            margin: 20px 0;
            padding: 10px 20px;
            background: #f0f8f0;
            border-radius: 0 8px 8px 0;
        }
        .content ul, .content ol {
            padding-left: 20px;
        }
        .content li {
            margin: 5px 0;
        }
        .content strong {
            color: #2d5016;
        }
        .content em {
            color: #4a7c59;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìÑ %s</h1>
            <a href="/" class="back-btn">‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É</a>
        </div>
        <div class="content">
            %s
        </div>
    </div>
</body>
</html>`, filename, filename, string(htmlContent))

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è HTML
	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	w.Write([]byte(htmlPage))
}

// handleDeleteFile –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
func handleDeleteFile(w http.ResponseWriter, r *http.Request) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
	if r.Method != "DELETE" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	filename := strings.TrimPrefix(r.URL.Path, "/delete/")
	if filename == "" {
		http.NotFound(w, r)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	filePath := filepath.Join(config.AppConfig.ResultFolder, filename)
	if !strings.HasPrefix(filePath, config.AppConfig.ResultFolder) {
		http.NotFound(w, r)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		http.NotFound(w, r)
		return
	}

	// –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
	err := os.Remove(filePath)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err), http.StatusInternalServerError)
		return
	}

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"))
}

// handleHistoryPage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
func handleHistoryPage(w http.ResponseWriter, r *http.Request) {
	historyEntries, err := readHistoryEntries()
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: %v", err), http.StatusInternalServerError)
		return
	}

	tmpl := `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ - LCG Results</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2d5016 0%, #4a7c59 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .content {
            padding: 30px;
        }
        .nav-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .nav-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1em;
            text-decoration: none;
            transition: background 0.3s ease;
            display: inline-block;
            text-align: center;
        }
        .nav-btn:hover {
            background: #2980b9;
        }
        .clear-btn {
            background: #e74c3c;
        }
        .clear-btn:hover {
            background: #c0392b;
        }
        .history-item {
            background: #f0f8f0;
            border: 1px solid #a8e6cf;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            position: relative;
        }
        .history-item:hover {
            border-color: #2d5016;
        }
        .history-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .history-index {
            background: #2d5016;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
        }
        .history-timestamp {
            color: #666;
            font-size: 0.9em;
        }
        .history-command {
            font-weight: 600;
            color: #333;
            margin-bottom: 8px;
        }
        .history-response {
            background: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
            color: #2d5016;
            border-left: 3px solid #2d5016;
        }
        .delete-btn {
            background: #e74c3c;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8em;
            transition: background 0.3s ease;
        }
        .delete-btn:hover {
            background: #c0392b;
        }
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìù –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤ Linux Command GPT</p>
        </div>
        <div class="content">
            <div class="nav-buttons">
                <a href="/" class="nav-btn">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                <a href="/prompts" class="nav-btn">‚öôÔ∏è –ü—Ä–æ–º–ø—Ç—ã</a>
                <button class="nav-btn clear-btn" onclick="clearHistory()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é</button>
            </div>

            {{if .Entries}}
            {{range .Entries}}
            <div class="history-item">
                <div class="history-header">
                    <div>
                        <span class="history-index">#{{.Index}}</span>
                        <span class="history-timestamp">{{.Timestamp}}</span>
                    </div>
                    <button class="delete-btn" onclick="deleteHistoryEntry({{.Index}})">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
                <div class="history-command">{{.Command}}</div>
                <div class="history-response">{{.Response}}</div>
            </div>
            {{end}}
            {{else}}
            <div class="empty-state">
                <h3>üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h3>
                <p>–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã lcg</p>
            </div>
            {{end}}
        </div>
    </div>
    
    <script>
        function deleteHistoryEntry(index) {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å #' + index + '?')) {
                fetch('/history/delete/' + index, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏');
                });
            }
        }
        
        function clearHistory() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é?\\n\\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
                fetch('/history/clear', {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏');
                });
            }
        }
    </script>
</body>
</html>`

	t, err := template.New("history").Parse(tmpl)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}

	data := struct {
		Entries []HistoryEntryInfo
	}{
		Entries: historyEntries,
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	t.Execute(w, data)
}

// HistoryEntryInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
type HistoryEntryInfo struct {
	Index     int
	Command   string
	Response  string
	Timestamp string
}

// readHistoryEntries —á–∏—Ç–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
func readHistoryEntries() ([]HistoryEntryInfo, error) {
	entries, err := read(config.AppConfig.ResultHistory)
	if err != nil {
		return nil, err
	}

	var result []HistoryEntryInfo
	for _, entry := range entries {
		result = append(result, HistoryEntryInfo{
			Index:     entry.Index,
			Command:   entry.Command,
			Response:  entry.Response,
			Timestamp: entry.Timestamp.Format("02.01.2006 15:04:05"),
		})
	}

	return result, nil
}

// handleDeleteHistoryEntry –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏
func handleDeleteHistoryEntry(w http.ResponseWriter, r *http.Request) {
	if r.Method != "DELETE" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	indexStr := strings.TrimPrefix(r.URL.Path, "/history/delete/")
	index, err := strconv.Atoi(indexStr)
	if err != nil {
		http.Error(w, "Invalid index", http.StatusBadRequest)
		return
	}

	err = DeleteHistoryEntry(config.AppConfig.ResultHistory, index)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v", err), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"))
}

// handleClearHistory –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–∏—Å—Ç–∫—É –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
func handleClearHistory(w http.ResponseWriter, r *http.Request) {
	if r.Method != "DELETE" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	err := os.WriteFile(config.AppConfig.ResultHistory, []byte("[]"), 0644)
	if err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: %v", err), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞"))
}

// handlePromptsPage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞–º–∏
func handlePromptsPage(w http.ResponseWriter, r *http.Request) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.AppConfig.PromptFolder)
	pm := gpt.NewPromptManager(homeDir)

	// –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω - –±–µ—Ä–µ–º –∏–∑ —Ñ–∞–π–ª–∞
	lang := r.URL.Query().Get("lang")
	if lang == "" {
		lang = pm.GetCurrentLanguage()
	}

	tmpl := `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã - LCG Results</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header {
            background: linear-gradient(135deg, #2d5016 0%, #4a7c59 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }
        .header h1 {
            margin: 0;
            font-size: 2.5em;
            font-weight: 300;
        }
        .content {
            padding: 30px;
        }
        .nav-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        .nav-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 1em;
            text-decoration: none;
            transition: background 0.3s ease;
            display: inline-block;
            text-align: center;
        }
        .nav-btn:hover {
            background: #2980b9;
        }
        .add-btn {
            background: #27ae60;
        }
        .add-btn:hover {
            background: #229954;
        }
        .prompt-item {
            background: #f0f8f0;
            border: 1px solid #a8e6cf;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 15px;
            position: relative;
        }
        .prompt-item:hover {
            border-color: #2d5016;
        }
        .prompt-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }
        .prompt-id {
            background: #2d5016;
            color: white;
            padding: 4px 8px;
            border-radius: 4px;
            font-weight: bold;
        }
        .prompt-name {
            font-weight: 600;
            color: #333;
            font-size: 1.2em;
        }
        .prompt-description {
            color: #666;
            margin-bottom: 10px;
        }
        .prompt-content {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
            color: #2d5016;
            border-left: 3px solid #2d5016;
            white-space: pre-wrap;
        }
        .prompt-actions {
            position: absolute;
            top: 10px;
            right: 10px;
            display: flex;
            gap: 8px;
        }
        .action-btn {
            background: #4a7c59;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8em;
            transition: background 0.3s ease;
        }
        .action-btn:hover {
            background: #2d5016;
        }
        .delete-btn {
            background: #e74c3c;
        }
        .delete-btn:hover {
            background: #c0392b;
        }
        .restore-btn {
            background: #3498db;
        }
        .restore-btn:hover {
            background: #2980b9;
        }
        .default-badge {
            background: #28a745;
            color: white;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.7em;
            margin-left: 8px;
        }
        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }
        .lang-switcher {
            display: flex;
            gap: 5px;
            margin-left: auto;
        }
        .lang-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
            transition: background 0.3s ease;
        }
        .lang-btn:hover {
            background: #5a6268;
        }
        .lang-btn.active {
            background: #3498db;
        }
        .lang-btn.active:hover {
            background: #2980b9;
        }
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }
        .tab-btn {
            background: #f8f9fa;
            color: #6c757d;
            border: none;
            padding: 12px 20px;
            border-radius: 6px 6px 0 0;
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s ease;
            border-bottom: 3px solid transparent;
        }
        .tab-btn:hover {
            background: #e9ecef;
            color: #495057;
        }
        .tab-btn.active {
            background: #3498db;
            color: white;
            border-bottom-color: #2980b9;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã</h1>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ Linux Command GPT</p>
        </div>
        <div class="content">
            <div class="nav-buttons">
                <a href="/" class="nav-btn">üè† –ì–ª–∞–≤–Ω–∞—è</a>
                <a href="/history" class="nav-btn">üìù –ò—Å—Ç–æ—Ä–∏—è</a>
                <button class="nav-btn add-btn" onclick="showAddForm()">‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç</button>
                <div class="lang-switcher">
                    <button class="lang-btn {{if eq .Lang "ru"}}active{{end}}" onclick="switchLang('ru')">üá∑üá∫ RU</button>
                    <button class="lang-btn {{if eq .Lang "en"}}active{{end}}" onclick="switchLang('en')">üá∫üá∏ EN</button>
                </div>
            </div>
            
            <!-- –í–∫–ª–∞–¥–∫–∏ -->
            <div class="tabs">
                <button class="tab-btn active" onclick="switchTab('system')">‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã</button>
                <button class="tab-btn" onclick="switchTab('verbose')">üìù –ü—Ä–æ–º–ø—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ (v/vv/vvv)</button>
            </div>

            <!-- –í–∫–ª–∞–¥–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ -->
            <div id="system-tab" class="tab-content active">
                {{if .Prompts}}
                {{range .Prompts}}
                <div class="prompt-item">
                    <div class="prompt-actions">
                        <button class="action-btn" onclick="editPrompt({{.ID}}, '{{.Name}}', '{{.Description}}', '{{.Content}}')">‚úèÔ∏è</button>
                        <button class="action-btn restore-btn" onclick="restorePrompt({{.ID}})" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é">üîÑ</button>
                        <button class="action-btn delete-btn" onclick="deletePrompt({{.ID}})">üóëÔ∏è</button>
                    </div>
                    <div class="prompt-header">
                        <div>
                            <span class="prompt-id">#{{.ID}}</span>
                            <span class="prompt-name">{{.Name}}</span>
                            {{if .IsDefault}}<span class="default-badge">–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π</span>{{end}}
                        </div>
                    </div>
                    <div class="prompt-description">{{.Description}}</div>
                    <div class="prompt-content">{{.Content}}</div>
                </div>
                {{end}}
                {{else}}
                <div class="empty-state">
                    <h3>‚öôÔ∏è –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã</p>
                </div>
                {{end}}
            </div>
            
            <!-- –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ -->
            <div id="verbose-tab" class="tab-content">
                {{if .VerbosePrompts}}
                {{range .VerbosePrompts}}
                <div class="prompt-item">
                    <div class="prompt-actions">
                        <button class="action-btn" onclick="editVerbosePrompt('{{.Mode}}', '{{.Content}}')">‚úèÔ∏è</button>
                        <button class="action-btn restore-btn" onclick="restoreVerbosePrompt('{{.Mode}}')" title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é">üîÑ</button>
                    </div>
                    <div class="prompt-header">
                        <div>
                            <span class="prompt-id">#{{.Mode}}</span>
                            <span class="prompt-name">{{.Name}}</span>
                            {{if .IsDefault}}<span class="default-badge">–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π</span>{{end}}
                        </div>
                    </div>
                    <div class="prompt-description">{{.Description}}</div>
                    <div class="prompt-content">{{.Content}}</div>
                </div>
                {{end}}
                {{else}}
                <div class="empty-state">
                    <h3>üìù –ü—Ä–æ–º–ø—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏</h3>
                    <p>–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ v, vv, vvv</p>
                </div>
                {{end}}
            </div>
        </div>
    </div>
    
    <!-- –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
    <div id="promptForm" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.5); z-index: 1000;">
        <div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background: white; padding: 30px; border-radius: 12px; max-width: 600px; width: 90%;">
            <h3 id="formTitle">–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç</h3>
            <form id="promptFormData">
                <input type="hidden" id="promptId" name="id">
                <div style="margin-bottom: 15px;">
                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
                    <input type="text" id="promptName" name="name" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" required>
                </div>
                <div style="margin-bottom: 15px;">
                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                    <input type="text" id="promptDescription" name="description" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px;" required>
                </div>
                <div style="margin-bottom: 20px;">
                    <label style="display: block; margin-bottom: 5px; font-weight: 600;">–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</label>
                    <textarea id="promptContent" name="content" rows="6" style="width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; font-family: monospace;" required></textarea>
                </div>
                <div style="text-align: right;">
                    <button type="button" onclick="hideForm()" style="background: #6c757d; color: white; border: none; padding: 8px 16px; border-radius: 4px; margin-right: 10px; cursor: pointer;">–û—Ç–º–µ–Ω–∞</button>
                    <button type="submit" style="background: #2d5016; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                </div>
            </form>
        </div>
    </div>
    
    <script>
        function showAddForm() {
            document.getElementById('formTitle').textContent = '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç';
            document.getElementById('promptFormData').reset();
            document.getElementById('promptId').value = '';
            document.getElementById('promptForm').style.display = 'block';
        }
        
        function editPrompt(id, name, description, content) {
            document.getElementById('formTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç';
            document.getElementById('promptId').value = id;
            document.getElementById('promptName').value = name;
            document.getElementById('promptDescription').value = description;
            document.getElementById('promptContent').value = content;
            document.getElementById('promptForm').style.display = 'block';
        }
        
        function hideForm() {
            document.getElementById('promptForm').style.display = 'none';
        }
        
        function switchTab(tabName) {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
            document.getElementById(tabName + '-tab').classList.add('active');
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É
            event.target.classList.add('active');
        }
        
        function switchLang(lang) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–º–ø—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
            saveCurrentPrompts(lang);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
            const url = new URL(window.location);
            url.searchParams.set('lang', lang);
            window.location.href = url.toString();
        }
        
        function saveCurrentPrompts(lang) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
            fetch('/prompts/save-lang', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    lang: lang
                })
            })
            .catch(error => {
                console.error('Error saving prompts:', error);
            });
        }
        
        function editVerbosePrompt(mode, content) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
            alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ');
        }
        
        function deletePrompt(id) {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–ø—Ç #' + id + '?')) {
                fetch('/prompts/delete/' + id, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        location.reload();
                    } else {
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞');
                });
            }
        }
        
        document.getElementById('promptFormData').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            const id = formData.get('id');
            const url = id ? '/prompts/edit/' + id : '/prompts/add';
            const method = id ? 'PUT' : 'POST';
            
            fetch(url, {
                method: method,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    name: formData.get('name'),
                    description: formData.get('description'),
                    content: formData.get('content')
                })
            })
            .then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞');
            });
        });

        // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        function restorePrompt(id) {
            if (confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
                fetch('/prompts/restore/' + id, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('–ü—Ä–æ–º–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                        location.reload();
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞');
                });
            }
        }

        // –§—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è verbose –ø—Ä–æ–º–ø—Ç–∞
        function restoreVerbosePrompt(mode) {
            if (confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
                fetch('/prompts/restore-verbose/' + mode, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('–ü—Ä–æ–º–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
                        location.reload();
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + data.error);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞');
                });
            }
        }
    </script>
</body>
</html>`

	t, err := template.New("prompts").Parse(tmpl)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —à–∞–±–ª–æ–Ω–∞", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º IsDefault
	type PromptWithDefault struct {
		gpt.SystemPrompt
		IsDefault bool
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–∑ —Ñ–∞–π–ª–∞
	currentLang := pm.GetCurrentLanguage()

	// –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫ –∏–∑ —Ñ–∞–π–ª–∞
	if lang == "" {
		lang = currentLang
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
	systemPrompts := getSystemPromptsWithLang(pm.Prompts, lang)

	var promptsWithDefault []PromptWithDefault
	for _, prompt := range systemPrompts {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã (ID 1-5) –Ω–∞ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
		if prompt.ID >= 1 && prompt.ID <= 5 {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–ø—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º
			isDefault := gpt.IsBuiltinPrompt(prompt)
			promptsWithDefault = append(promptsWithDefault, PromptWithDefault{
				SystemPrompt: prompt,
				IsDefault:    isDefault,
			})
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞ sys_prompts
	verbosePrompts := getVerbosePromptsFromFile(pm.Prompts, lang)

	data := struct {
		Prompts        []PromptWithDefault
		VerbosePrompts []VerbosePrompt
		Lang           string
	}{
		Prompts:        promptsWithDefault,
		VerbosePrompts: verbosePrompts,
		Lang:           lang,
	}

	w.Header().Set("Content-Type", "text/html; charset=utf-8")
	t.Execute(w, data)
}

// handleAddPrompt –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
func handleAddPrompt(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.AppConfig.PromptFolder)
	pm := gpt.NewPromptManager(homeDir)

	// –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
	var promptData struct {
		Name        string `json:"name"`
		Description string `json:"description"`
		Content     string `json:"content"`
	}

	if err := json.NewDecoder(r.Body).Decode(&promptData); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", http.StatusBadRequest)
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
	if err := pm.AddPrompt(promptData.Name, promptData.Description, promptData.Content); err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: %v", err), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"))
}

// handleEditPrompt –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
func handleEditPrompt(w http.ResponseWriter, r *http.Request) {
	if r.Method != "PUT" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
	idStr := strings.TrimPrefix(r.URL.Path, "/prompts/edit/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–º–ø—Ç–∞", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.AppConfig.PromptFolder)
	pm := gpt.NewPromptManager(homeDir)

	// –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
	var promptData struct {
		Name        string `json:"name"`
		Description string `json:"description"`
		Content     string `json:"content"`
	}

	if err := json.NewDecoder(r.Body).Decode(&promptData); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", http.StatusBadRequest)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
	if err := pm.UpdatePrompt(id, promptData.Name, promptData.Description, promptData.Content); err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: %v", err), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω"))
}

// handleDeletePrompt –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
func handleDeletePrompt(w http.ResponseWriter, r *http.Request) {
	if r.Method != "DELETE" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
	idStr := strings.TrimPrefix(r.URL.Path, "/prompts/delete/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ–º–ø—Ç–∞", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config.AppConfig.PromptFolder)
	pm := gpt.NewPromptManager(homeDir)

	// –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–ø—Ç
	if err := pm.DeletePrompt(id); err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: %v", err), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"))
}

// VerbosePrompt —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
type VerbosePrompt struct {
	Mode        string
	Name        string
	Description string
	Content     string
	IsDefault   bool
}

// getVerbosePromptsFromFile –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞ sys_prompts
func getVerbosePromptsFromFile(prompts []gpt.SystemPrompt, lang string) []VerbosePrompt {
	var verbosePrompts []VerbosePrompt

	// –ò—â–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö (ID 6, 7, 8)
	for _, prompt := range prompts {
		if prompt.ID >= 6 && prompt.ID <= 8 {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ ID
			var mode string
			switch prompt.ID {
			case 6:
				mode = "v"
			case 7:
				mode = "vv"
			case 8:
				mode = "vvv"
			}

			// –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
			translatedPrompt := translateVerbosePrompt(prompt, lang)

			verbosePrompts = append(verbosePrompts, VerbosePrompt{
				Mode:        mode,
				Name:        translatedPrompt.Name,
				Description: translatedPrompt.Description,
				Content:     translatedPrompt.Content,
				IsDefault:   gpt.IsBuiltinPrompt(translatedPrompt), // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–ø—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º
			})
		}
	}

	// –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ
	if len(verbosePrompts) == 0 {
		return getVerbosePrompts(lang)
	}

	return verbosePrompts
}

// translateVerbosePrompt –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫
func translateVerbosePrompt(prompt gpt.SystemPrompt, lang string) gpt.SystemPrompt {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ YAML
	if builtinPrompt := gpt.GetBuiltinPromptByIDAndLanguage(prompt.ID, lang); builtinPrompt != nil {
		return *builtinPrompt
	}

	// –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
	return prompt
}

// getVerbosePrompts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ v/vv/vvv (fallback)
func getVerbosePrompts(lang string) []VerbosePrompt {
	// –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
	enPrompts := []VerbosePrompt{
		{
			Mode:        "v",
			Name:        "Verbose Mode",
			Description: "Detailed explanation of the command",
			Content:     "Provide a brief explanation of what this Linux command does, including what each flag and option means, and give examples of usage.",
			IsDefault:   true,
		},
		{
			Mode:        "vv",
			Name:        "Very Verbose Mode",
			Description: "Comprehensive explanation with alternatives",
			Content:     "Provide a comprehensive explanation of this Linux command, including detailed descriptions of all flags and options, alternative approaches, common use cases, and potential pitfalls to avoid.",
			IsDefault:   true,
		},
		{
			Mode:        "vvv",
			Name:        "Maximum Verbose Mode",
			Description: "Complete guide with examples and best practices",
			Content:     "Provide a complete guide for this Linux command, including detailed explanations of all options, multiple examples with different scenarios, alternative commands that achieve similar results, best practices, troubleshooting tips, and related commands that work well together.",
			IsDefault:   true,
		},
	}

	// –†—É—Å—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏
	ruPrompts := []VerbosePrompt{
		{
			Mode:        "v",
			Name:        "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º",
			Description: "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã",
			Content:     "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–∞ Linux –∫–æ–º–∞–Ω–¥–∞, –≤–∫–ª—é—á–∞—è –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–ª–∞–≥–∞ –∏ –æ–ø—Ü–∏–∏, –∏ –ø—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
			IsDefault:   true,
		},
		{
			Mode:        "vv",
			Name:        "–û—á–µ–Ω—å –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º",
			Description: "–ò—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏",
			Content:     "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–µ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ç–æ–π Linux –∫–æ–º–∞–Ω–¥—ã, –≤–∫–ª—é—á–∞—è –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤ –∏ –æ–ø—Ü–∏–π, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–¥–≤–æ–¥–Ω—ã–µ –∫–∞–º–Ω–∏, –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å.",
			IsDefault:   true,
		},
		{
			Mode:        "vvv",
			Name:        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Ä–µ–∂–∏–º",
			Description: "–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ª—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏",
			Content:     "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —ç—Ç–æ–π Linux –∫–æ–º–∞–Ω–¥–µ, –≤–∫–ª—é—á–∞—è –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø—Ü–∏–π, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏, —Å–æ–≤–µ—Ç—ã –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –Ω–µ–ø–æ–ª–∞–¥–æ–∫ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ.",
			IsDefault:   true,
		},
	}

	if lang == "ru" {
		return ruPrompts
	}
	return enPrompts
}

// getSystemPromptsWithLang –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å —É—á–µ—Ç–æ–º —è–∑—ã–∫–∞
func getSystemPromptsWithLang(prompts []gpt.SystemPrompt, lang string) []gpt.SystemPrompt {
	// –ï—Å–ª–∏ —è–∑—ã–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
	if lang == "en" {
		return prompts
	}

	// –î–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
	var translatedPrompts []gpt.SystemPrompt
	for _, prompt := range prompts {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
		if gpt.IsBuiltinPrompt(prompt) {
			// –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π
			translated := translateSystemPrompt(prompt, lang)
			translatedPrompts = append(translatedPrompts, translated)
		} else {
			translatedPrompts = append(translatedPrompts, prompt)
		}
	}

	return translatedPrompts
}

// translateSystemPrompt –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫
func translateSystemPrompt(prompt gpt.SystemPrompt, lang string) gpt.SystemPrompt {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∏–∑ YAML
	if builtinPrompt := gpt.GetBuiltinPromptByIDAndLanguage(prompt.ID, lang); builtinPrompt != nil {
		return *builtinPrompt
	}

	// –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
	return prompt
}

// handleSaveLang –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞
func handleSaveLang(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
	pm := gpt.NewPromptManager(homeDir)

	// –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
	var langData struct {
		Lang string `json:"lang"`
	}

	if err := json.NewDecoder(r.Body).Decode(&langData); err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON", http.StatusBadRequest)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ —Ñ–∞–π–ª–∞
	pm.SetLanguage(langData.Lang)

	// –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã (–ø–æ ID), –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
	var translatedPrompts []gpt.SystemPrompt
	for _, p := range pm.Prompts {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–ø—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø–æ ID (1-8)
		if pm.IsDefaultPromptByID(p) {
			// System (1-5) –∏ Verbose (6-8)
			if p.ID >= 1 && p.ID <= 5 {
				translatedPrompts = append(translatedPrompts, translateSystemPrompt(p, langData.Lang))
			} else if p.ID >= 6 && p.ID <= 8 {
				translatedPrompts = append(translatedPrompts, translateVerbosePrompt(p, langData.Lang))
			} else {
				translatedPrompts = append(translatedPrompts, p)
			}
		} else {
			// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã (ID > 8) –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
			translatedPrompts = append(translatedPrompts, p)
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –≤ pm –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
	pm.Prompts = translatedPrompts
	if err := pm.SaveAllPrompts(); err != nil {
		http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: %v", err), http.StatusInternalServerError)
		return
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte("–ü—Ä–æ–º–ø—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"))
}

// handleRestorePrompt –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func handleRestorePrompt(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
	idStr := strings.TrimPrefix(r.URL.Path, "/prompts/restore/")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		http.Error(w, "Invalid prompt ID", http.StatusBadRequest)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
	pm := gpt.NewPromptManager(homeDir)

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
	currentLang := pm.GetCurrentLanguage()

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
	builtinPrompt := gpt.GetBuiltinPromptByIDAndLanguage(id, currentLang)
	if builtinPrompt == nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": false,
			"error":   "–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö",
		})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–ø–∏—Å–∫–µ
	for i, prompt := range pm.Prompts {
		if prompt.ID == id {
			pm.Prompts[i] = *builtinPrompt
			break
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := pm.SaveAllPrompts(); err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": false,
			"error":   "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + err.Error(),
		})
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"success": true,
	})
}

// handleRestoreVerbosePrompt –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç verbose –ø—Ä–æ–º–ø—Ç –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
func handleRestoreVerbosePrompt(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –∏–∑ URL
	mode := strings.TrimPrefix(r.URL.Path, "/prompts/restore-verbose/")

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", http.StatusInternalServerError)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
	pm := gpt.NewPromptManager(homeDir)

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
	currentLang := pm.GetCurrentLanguage()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ —Ä–µ–∂–∏–º—É
	var id int
	switch mode {
	case "v":
		id = 6
	case "vv":
		id = 7
	case "vvv":
		id = 8
	default:
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": false,
			"error":   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ø—Ä–æ–º–ø—Ç–∞",
		})
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
	builtinPrompt := gpt.GetBuiltinPromptByIDAndLanguage(id, currentLang)
	if builtinPrompt == nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusBadRequest)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": false,
			"error":   "–ü—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö",
		})
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–ø–∏—Å–∫–µ
	for i, prompt := range pm.Prompts {
		if prompt.ID == id {
			pm.Prompts[i] = *builtinPrompt
			break
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if err := pm.SaveAllPrompts(); err != nil {
		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusInternalServerError)
		json.NewEncoder(w).Encode(map[string]interface{}{
			"success": false,
			"error":   "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: " + err.Error(),
		})
		return
	}

	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"success": true,
	})
}
