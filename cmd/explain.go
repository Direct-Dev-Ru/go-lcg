package cmd

import (
	"fmt"
	"os"
	"path"
	"strings"
	"time"

	"github.com/atotto/clipboard"
	"github.com/direct-dev-ru/linux-command-gpt/config"
	"github.com/direct-dev-ru/linux-command-gpt/gpt"
)

// ExplainDeps –∏–Ω—ä–µ–∫—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
type ExplainDeps struct {
	DisableHistory bool
	PrintColored   func(string, string)
	ColorPurple    string
	ColorGreen     string
	ColorRed       string
	ColorYellow    string
	GetCommand     func(gpt.Gpt3, string) (string, float64)
}

// ShowDetailedExplanation –¥–µ–ª–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏
func ShowDetailedExplanation(command string, gpt3 gpt.Gpt3, system, originalCmd string, timeout int, level int, deps ExplainDeps) {
	var detailedSystem string
	switch level {
	case 1: // v ‚Äî –∫—Ä–∞—Ç–∫–æ
		detailedSystem = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Linux-–∏–Ω–∂–µ–Ω–µ—Ä. –û–±—ä—è—Å–Ω–∏ –ö–†–ê–¢–ö–û, –ø–æ –¥–µ–ª—É: —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–æ–º–∞–Ω–¥–∞ –∏ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –∫–ª—é—á–∏. –ë–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤. –ú–∏–Ω–∏–º—É–º —Ç–µ–∫—Å—Ç–∞. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
	case 2: // vv ‚Äî —Å—Ä–µ–¥–Ω–µ
		detailedSystem = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Linux-–∏–Ω–∂–µ–Ω–µ—Ä. –î–∞–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ: –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, —Ä–∞–∑–±–æ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª—é—á–µ–π, 1-2 –ø—Ä–∏–º–µ—Ä–∞. –ö—Ä–∞—Ç–∫–æ —É–ø–æ–º—è–Ω–∏ 1-2 –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –±–µ–∑ –≥–ª—É–±–æ–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
	default: // vvv ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ
		detailedSystem = "–¢—ã –æ–ø—ã—Ç–Ω—ã–π Linux-–∏–Ω–∂–µ–Ω–µ—Ä. –î–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–ª–Ω—ã–º —Ä–∞–∑–±–æ—Ä–æ–º –∫–ª—é—á–µ–π, –ø–æ–¥–∫–æ–º–∞–Ω–¥, —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–∏–º–µ—Ä–æ–≤. –ó–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥–æ–π/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ (—Å–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è–º–∏ –∏ –∫–æ–≥–¥–∞ —á—Ç–æ –ª—É—á—à–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å). –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."
	}

	ask := fmt.Sprintf("–û–±—ä—è—Å–Ω–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã. –ò—Å—Ö–æ–¥–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: %s. –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s", command, originalCmd)
	detailed := gpt.NewGpt3(gpt3.ProviderType, config.AppConfig.Host, gpt3.ApiKey, gpt3.Model, detailedSystem, 0.2, timeout)

	deps.PrintColored("\nüß† –ü–æ–ª—É—á–∞—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...\n", deps.ColorPurple)
	explanation, elapsed := deps.GetCommand(*detailed, ask)
	if explanation == "" {
		deps.PrintColored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.\n", deps.ColorRed)
		return
	}

	deps.PrintColored(fmt.Sprintf("‚úÖ –ì–æ—Ç–æ–≤–æ –∑–∞ %.2f —Å–µ–∫\n", elapsed), deps.ColorGreen)
	deps.PrintColored("\n–í–ù–ò–ú–ê–ù–ò–ï: –û–¢–í–ï–¢ –°–§–û–†–ú–ò–†–û–í–ê–ù –ò–ò. –¢–†–ï–ë–£–ï–¢–°–Ø –ü–†–û–í–ï–†–ö–ê –ò –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó. –í–û–ó–ú–û–ñ–ù–´ –û–®–ò–ë–ö–ò –ò –ì–ê–õ–õ–Æ–¶–ò–ù–ê–¶–ò–ò.\n", deps.ColorRed)
	deps.PrintColored("\nüìñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:\n\n", deps.ColorYellow)
	fmt.Println(explanation)

	fmt.Printf("\n–î–µ–π—Å—Ç–≤–∏—è: (c)–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, (s)—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, (r)–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, (n)–Ω–∏—á–µ–≥–æ: ")
	var choice string
	fmt.Scanln(&choice)
	switch strings.ToLower(choice) {
	case "c":
		clipboard.WriteAll(explanation)
		fmt.Println("‚úÖ –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
	case "s":
		saveExplanation(explanation, gpt3.Model, originalCmd, command, config.AppConfig.ResultFolder)
	case "r":
		fmt.Println("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ...")
		ShowDetailedExplanation(command, gpt3, system, originalCmd, timeout, level, deps)
	default:
		fmt.Println(" –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é.")
	}

	if !deps.DisableHistory && (strings.ToLower(choice) == "c" || strings.ToLower(choice) == "s" || strings.ToLower(choice) == "n") {
		SaveToHistory(config.AppConfig.ResultHistory, config.AppConfig.ResultFolder, originalCmd, command, system, explanation)
	}
}

// saveExplanation —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
func saveExplanation(explanation string, model string, originalCmd string, commandResponse string, resultFolder string) {
	timestamp := time.Now().Format("2006-01-02_15-04-05")
	filename := fmt.Sprintf("gpt_explanation_%s_%s.md", model, timestamp)
	filePath := path.Join(resultFolder, filename)
	title := truncateTitle(originalCmd)
	content := fmt.Sprintf(
		"# %s\n\n## Prompt\n\n%s\n\n## Command\n\n%s\n\n## Explanation and Alternatives (model: %s)\n\n%s\n",
		title,
		originalCmd,
		commandResponse,
		model,
		explanation,
	)
	if err := os.WriteFile(filePath, []byte(content), 0644); err != nil {
		fmt.Println("Failed to save explanation:", err)
	} else {
		fmt.Printf("Saved to %s\n", filePath)
	}
}

// truncateTitle —Å–æ–∫—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤ (–ø–æ —Ä—É–Ω–∞–º), –¥–æ–±–∞–≤–ª—è—è " ..." –ø—Ä–∏ —É—Å–µ—á–µ–Ω–∏–∏
func truncateTitle(s string) string {
	const maxLen = 120
	if runeCount := len([]rune(s)); runeCount <= maxLen {
		return s
	}
	const head = 116
	r := []rune(s)
	if len(r) <= head {
		return s
	}
	return string(r[:head]) + " ..."
}
