package gpt

import (
	"encoding/json"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/direct-dev-ru/linux-command-gpt/config"
)

// SystemPrompt –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
type SystemPrompt struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Content     string `json:"content"`
}

// PromptManager —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
type PromptManager struct {
	Prompts    []SystemPrompt
	ConfigFile string
	HomeDir    string
	Language   string // –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è —Ñ–∞–π–ª–∞ sys_prompts (en/ru)
}

// NewPromptManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤
func NewPromptManager(homeDir string) *PromptManager {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –º–æ–¥—É–ª—è config
	promptFolder := config.AppConfig.PromptFolder

	// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É sys_prompts
	sysPromptsFile := filepath.Join(promptFolder, "sys_prompts")

	pm := &PromptManager{
		ConfigFile: sysPromptsFile,
		HomeDir:    homeDir,
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª sys_prompts
	if _, err := os.Stat(sysPromptsFile); os.IsNotExist(err) {
		// –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
		pm.createInitialPromptsFile()
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
	pm.loadAllPrompts()

	return pm
}

// createInitialPromptsFile —Å–æ–∑–¥–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏
func (pm *PromptManager) createInitialPromptsFile() {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∫ —Ä—É—Å—Å–∫–∏–π
	pm.Language = "ru"

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ YAML –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
	// –§—É–Ω–∫—Ü–∏—è GetBuiltinPromptsByLanguage —É–∂–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É
	pm.Prompts = GetBuiltinPromptsByLanguage("ru")

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –≤ —Ñ–∞–π–ª
	pm.saveAllPrompts()
}

// loadDefaultPrompts –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
func (pm *PromptManager) LoadDefaultPrompts() {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –ø–æ –û–°
	pm.Prompts = GetBuiltinPromptsByLanguage("en")
}

// loadAllPrompts –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞ sys_prompts
func (pm *PromptManager) loadAllPrompts() {
	if _, err := os.Stat(pm.ConfigFile); os.IsNotExist(err) {
		return
	}

	data, err := os.ReadFile(pm.ConfigFile)
	if err != nil {
		return
	}

	// –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ language –∏ prompts
	var pf promptsFile
	if err := json.Unmarshal(data, &pf); err == nil && len(pf.Prompts) > 0 {
		pm.Language = pf.Language
		pm.Prompts = pf.Prompts
		return
	}

	// –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–ø—Ç–æ–≤
	var prompts []SystemPrompt
	if err := json.Unmarshal(data, &prompts); err == nil {
		pm.Prompts = prompts
		pm.Language = "en"
		// –ú–∏–≥—Ä–∞—Ü–∏—è –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
	}
}

// saveAllPrompts —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –≤ —Ñ–∞–π–ª sys_prompts
// –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ sys_prompts
type promptsFile struct {
	Language string         `json:"language,omitempty"`
	Prompts  []SystemPrompt `json:"prompts"`
}

func (pm *PromptManager) saveAllPrompts() error {
	pf := promptsFile{
		Language: pm.Language,
		Prompts:  pm.Prompts,
	}
	data, err := json.MarshalIndent(pf, "", "  ")
	if err != nil {
		return err
	}
	return os.WriteFile(pm.ConfigFile, data, 0644)
}

// SaveAllPrompts —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è saveAllPrompts
func (pm *PromptManager) SaveAllPrompts() error {
	return pm.saveAllPrompts()
}

// GetCurrentLanguage –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
func (pm *PromptManager) GetCurrentLanguage() string {
	if pm.Language == "" {
		return "en"
	}
	return pm.Language
}

// SetLanguage —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –≤—Å–µ—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
func (pm *PromptManager) SetLanguage(lang string) {
	pm.Language = lang
}

// saveCustomPrompts —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã
func (pm *PromptManager) saveCustomPrompts() error {
	// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã (ID > 5)
	var customPrompts []SystemPrompt
	for _, prompt := range pm.Prompts {
		if prompt.ID > 5 {
			customPrompts = append(customPrompts, prompt)
		}
	}

	data, err := json.MarshalIndent(customPrompts, "", "  ")
	if err != nil {
		return err
	}

	return os.WriteFile(pm.ConfigFile, data, 0644)
}

// GetPromptByID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –ø–æ ID
func (pm *PromptManager) GetPromptByID(id int) (*SystemPrompt, error) {
	for _, prompt := range pm.Prompts {
		if prompt.ID == id {
			return &prompt, nil
		}
	}
	return nil, fmt.Errorf("–ø—Ä–æ–º–ø—Ç —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", id)
}

// GetPromptByName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –ø–æ –∏–º–µ–Ω–∏
func (pm *PromptManager) GetPromptByName(name string) (*SystemPrompt, error) {
	for _, prompt := range pm.Prompts {
		if strings.EqualFold(prompt.Name, name) {
			return &prompt, nil
		}
	}
	return nil, fmt.Errorf("–ø—Ä–æ–º–ø—Ç —Å –∏–º–µ–Ω–µ–º '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω", name)
}

// AddPrompt –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
func (pm *PromptManager) AddPrompt(name, description, content string) error {
	// –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID
	maxID := 0
	for _, prompt := range pm.Prompts {
		if prompt.ID > maxID {
			maxID = prompt.ID
		}
	}

	newPrompt := SystemPrompt{
		ID:          maxID + 1,
		Name:        name,
		Description: description,
		Content:     content,
	}

	pm.Prompts = append(pm.Prompts, newPrompt)
	return pm.saveAllPrompts()
}

// UpdatePrompt –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç
func (pm *PromptManager) UpdatePrompt(id int, name, description, content string) error {
	for i, prompt := range pm.Prompts {
		if prompt.ID == id {
			pm.Prompts[i].Name = name
			pm.Prompts[i].Description = description
			pm.Prompts[i].Content = content
			return pm.saveAllPrompts()
		}
	}
	return fmt.Errorf("–ø—Ä–æ–º–ø—Ç —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", id)
}

// DeletePrompt —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –ø–æ ID
func (pm *PromptManager) DeletePrompt(id int) error {
	for i, prompt := range pm.Prompts {
		if prompt.ID == id {
			pm.Prompts = append(pm.Prompts[:i], pm.Prompts[i+1:]...)
			return pm.saveAllPrompts()
		}
	}
	return fmt.Errorf("–ø—Ä–æ–º–ø—Ç —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", id)
}

// ListPrompts –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
func (pm *PromptManager) ListPrompts() {
	pm.ListPromptsWithFull(false)
}

// ListPromptsWithFull –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –æ–ø—Ü–∏–µ–π –ø–æ–ª–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
func (pm *PromptManager) ListPromptsWithFull(full bool) {
	fmt.Println("üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã:")
	fmt.Println()

	for i, prompt := range pm.Prompts {
		// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –ø—Ä–æ–º–ø—Ç–∞–º–∏
		if i > 0 {
			fmt.Println("‚îÄ" + strings.Repeat("‚îÄ", 60))
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–ø—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º
		isDefault := pm.isDefaultPrompt(prompt)

		// –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–º–ø—Ç–∞
		if isDefault {
			fmt.Printf("üîπ ID: %d | –ù–∞–∑–≤–∞–Ω–∏–µ: %s | –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π\n", prompt.ID, prompt.Name)
		} else {
			fmt.Printf("üîπ ID: %d | –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", prompt.ID, prompt.Name)
		}

		// –û–ø–∏—Å–∞–Ω–∏–µ
		if prompt.Description != "" {
			fmt.Printf("üìã –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", prompt.Description)
		}

		// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–æ–º–ø—Ç–∞
		fmt.Println("üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
		fmt.Println("‚îå" + strings.Repeat("‚îÄ", 58) + "‚îê")

		// –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—ã–≤–æ–¥–∏–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
		lines := strings.Split(prompt.Content, "\n")
		for _, line := range lines {
			if full {
				// –ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥ –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏ - —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
				if len(line) > 56 {
					// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
					for i := 0; i < len(line); i += 56 {
						end := i + 56
						if end > len(line) {
							end = len(line)
						}
						fmt.Printf("‚îÇ %-56s ‚îÇ\n", line[i:end])
					}
				} else {
					fmt.Printf("‚îÇ %-56s ‚îÇ\n", line)
				}
			} else {
				// –û–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥ —Å –æ–±—Ä–µ–∑–∫–æ–π
				fmt.Printf("‚îÇ %-56s ‚îÇ\n", truncateString(line, 56))
			}
		}

		fmt.Println("‚îî" + strings.Repeat("‚îÄ", 58) + "‚îò")
		fmt.Println()
	}
}

// isDefaultPrompt –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–ø—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –∏ –Ω–µ–∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º
func (pm *PromptManager) isDefaultPrompt(prompt SystemPrompt) bool {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ builtin_prompts.go
	return IsBuiltinPrompt(prompt)
}

// IsDefaultPromptByID –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–º–ø—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º —Ç–æ–ª—å–∫–æ –ø–æ ID (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
func (pm *PromptManager) IsDefaultPromptByID(prompt SystemPrompt) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ (1-8)
	return prompt.ID >= 1 && prompt.ID <= 8
}

// GetRussianDefaultPrompts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä—É—Å—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
func GetRussianDefaultPrompts() []SystemPrompt {
	return GetBuiltinPromptsByLanguage("ru")
}

// getDefaultPrompts –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
func (pm *PromptManager) GetDefaultPrompts() []SystemPrompt {
	return GetBuiltinPrompts()
}

// AddCustomPrompt –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
func (pm *PromptManager) AddCustomPrompt(name, description, content string) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —É–Ω–∏–∫–∞–ª—å–Ω–æ
	for _, prompt := range pm.Prompts {
		if strings.EqualFold(prompt.Name, name) {
			return fmt.Errorf("–ø—Ä–æ–º–ø—Ç —Å –∏–º–µ–Ω–µ–º '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", name)
		}
	}

	newPrompt := SystemPrompt{
		ID:          len(pm.Prompts) + 1,
		Name:        name,
		Description: description,
		Content:     content,
	}

	pm.Prompts = append(pm.Prompts, newPrompt)
	return pm.saveCustomPrompts()
}

// DeleteCustomPrompt —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
func (pm *PromptManager) DeleteCustomPrompt(id int) error {
	if id <= 5 {
		return fmt.Errorf("–Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
	}

	for i, prompt := range pm.Prompts {
		if prompt.ID == id {
			pm.Prompts = append(pm.Prompts[:i], pm.Prompts[i+1:]...)
			return pm.saveCustomPrompts()
		}
	}

	return fmt.Errorf("–ø—Ä–æ–º–ø—Ç —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", id)
}

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen-3] + "..."
}

// GetVerbosePromptByLevel –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—é
func GetVerbosePromptByLevel(level int) string {
	// –°–æ–∑–¥–∞–µ–º PromptManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞ –∏–∑ sys_prompts (–±–µ–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ñ–æ–ª—Ç–æ–≤)
	pm := NewPromptManager("")
	currentLang := pm.GetCurrentLanguage()

	var prompt *SystemPrompt
	switch level {
	case 1:
		prompt = GetBuiltinPromptByIDAndLanguage(6, currentLang) // v
	case 2:
		prompt = GetBuiltinPromptByIDAndLanguage(7, currentLang) // vv
	case 3:
		prompt = GetBuiltinPromptByIDAndLanguage(8, currentLang) // vvv
	default:
		return ""
	}

	if prompt != nil {
		return prompt.Content
	}
	return ""
}
