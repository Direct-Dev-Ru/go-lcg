package main

import (
	_ "embed"
	"fmt"
	"math"
	"os"
	"os/exec"
	"os/user"
	"path"
	"strings"
	"time"

	"github.com/atotto/clipboard"
	"github.com/direct-dev-ru/linux-command-gpt/gpt"
	"github.com/direct-dev-ru/linux-command-gpt/reader"
	"github.com/urfave/cli/v2"
)

//go:embed VERSION.txt
var Version string

var (
	cwd, _        = os.Getwd()
	HOST          = getEnv("LCG_HOST", "http://192.168.87.108:11434/")
	COMPLETIONS   = getEnv("LCG_COMPLETIONS_PATH", "api/chat")
	MODEL         = getEnv("LCG_MODEL", "codegeex4")
	PROMPT        = getEnv("LCG_PROMPT", "Reply with linux command and nothing else. Output with plain response - no need formatting. No need explanation. No need code blocks. No need ` symbols.")
	API_KEY_FILE  = getEnv("LCG_API_KEY_FILE", ".openai_api_key")
	RESULT_FOLDER = getEnv("LCG_RESULT_FOLDER", path.Join(cwd, "gpt_results"))
	PROVIDER_TYPE = getEnv("LCG_PROVIDER", "ollama") // "ollama", "proxy"
	JWT_TOKEN     = getEnv("LCG_JWT_TOKEN", "")
)

const (
	colorRed    = "\033[31m"
	colorGreen  = "\033[32m"
	colorYellow = "\033[33m"
	colorBlue   = "\033[34m"
	colorPurple = "\033[35m"
	colorCyan   = "\033[36m"
	colorReset  = "\033[0m"
	colorBold   = "\033[1m"
)

func main() {
	app := &cli.App{
		Name:     "lcg",
		Usage:    "Linux Command GPT - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Linux –∫–æ–º–∞–Ω–¥ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π",
		Version:  Version,
		Commands: getCommands(),
		UsageText: `
lcg [–æ–ø—Ü–∏–∏] <–æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã>

–ü—Ä–∏–º–µ—Ä—ã:
  lcg "—Ö–æ—á—É –∏–∑–≤–ª–µ—á—å —Ñ–∞–π–ª linux-command-gpt.tar.gz"
  lcg --file /path/to/file.txt "—Ö–æ—á—É –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é ls"
`,
		Description: `
Linux Command GPT - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Linux –∫–æ–º–∞–Ω–¥ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏–π –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á—Ç–µ–Ω–∏–µ —á–∞—Å—Ç–µ–π –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å, –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  LCG_HOST          Endpoint –¥–ª—è LLM API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://192.168.87.108:11434/)
  LCG_MODEL         –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: codegeex4)
  LCG_PROMPT        –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  LCG_PROVIDER      –¢–∏–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: "ollama" –∏–ª–∏ "proxy" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ollama)
  LCG_JWT_TOKEN     JWT —Ç–æ–∫–µ–Ω –¥–ª—è proxy –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
`,
		Flags: []cli.Flag{
			&cli.StringFlag{
				Name:    "file",
				Aliases: []string{"f"},
				Usage:   "Read part of the command from a file",
			},
			&cli.StringFlag{
				Name:        "sys",
				Aliases:     []string{"s"},
				Usage:       "System prompt",
				DefaultText: getEnv("LCG_PROMPT", "Reply with linux command and nothing else. Output with plain response - no need formatting. No need explanation. No need code blocks"),
				Value:       getEnv("LCG_PROMPT", "Reply with linux command and nothing else. Output with plain response - no need formatting. No need explanation. No need code blocks"),
			},
		},
		Action: func(c *cli.Context) error {
			file := c.String("file")
			system := c.String("sys")
			args := c.Args().Slice()
			if len(args) == 0 {
				cli.ShowAppHelp(c)
				showTips()
				return nil
			}
			executeMain(file, system, strings.Join(args, " "))
			return nil
		},
	}

	cli.VersionFlag = &cli.BoolFlag{
		Name:    "version",
		Aliases: []string{"V", "v"},
		Usage:   "prints out version",
	}
	cli.VersionPrinter = func(cCtx *cli.Context) {
		fmt.Printf("%s\n", cCtx.App.Version)
	}

	if err := app.Run(os.Args); err != nil {
		fmt.Println("Error:", err)
		os.Exit(1)
	}
}

func getCommands() []*cli.Command {
	return []*cli.Command{
		{
			Name:    "update-key",
			Aliases: []string{"u"},
			Usage:   "Update the API key",
			Action: func(c *cli.Context) error {
				gpt3 := initGPT(PROMPT)
				gpt3.UpdateKey()
				fmt.Println("API key updated.")
				return nil
			},
		},
		{
			Name:    "delete-key",
			Aliases: []string{"d"},
			Usage:   "Delete the API key",
			Action: func(c *cli.Context) error {
				gpt3 := initGPT(PROMPT)
				gpt3.DeleteKey()
				fmt.Println("API key deleted.")
				return nil
			},
		},
		{
			Name:    "update-jwt",
			Aliases: []string{"j"},
			Usage:   "Update the JWT token for proxy API",
			Action: func(c *cli.Context) error {
				if PROVIDER_TYPE != "proxy" {
					fmt.Println("JWT token is only needed for proxy provider")
					return nil
				}

				var jwtToken string
				fmt.Print("JWT Token: ")
				fmt.Scanln(&jwtToken)

				currentUser, _ := user.Current()
				jwtFile := currentUser.HomeDir + "/.proxy_jwt_token"
				if err := os.WriteFile(jwtFile, []byte(strings.TrimSpace(jwtToken)), 0600); err != nil {
					fmt.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: %v\n", err)
					return err
				}

				fmt.Println("JWT token updated.")
				return nil
			},
		},
		{
			Name:    "delete-jwt",
			Aliases: []string{"dj"},
			Usage:   "Delete the JWT token for proxy API",
			Action: func(c *cli.Context) error {
				if PROVIDER_TYPE != "proxy" {
					fmt.Println("JWT token is only needed for proxy provider")
					return nil
				}

				currentUser, _ := user.Current()
				jwtFile := currentUser.HomeDir + "/.proxy_jwt_token"
				if err := os.Remove(jwtFile); err != nil && !os.IsNotExist(err) {
					fmt.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞: %v\n", err)
					return err
				}

				fmt.Println("JWT token deleted.")
				return nil
			},
		},
		{
			Name:    "health",
			Aliases: []string{"he"}, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å "h" –Ω–∞ "he"
			Usage:   "Check API health",
			Action: func(c *cli.Context) error {
				gpt3 := initGPT(PROMPT)
				if err := gpt3.Health(); err != nil {
					fmt.Printf("Health check failed: %v\n", err)
					return err
				}
				fmt.Println("API is healthy.")
				return nil
			},
		},
		{
			Name:    "config",
			Aliases: []string{"co"}, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å "c" –Ω–∞ "co"
			Usage:   "Show current configuration",
			Action: func(c *cli.Context) error {
				fmt.Printf("Provider: %s\n", PROVIDER_TYPE)
				fmt.Printf("Host: %s\n", HOST)
				fmt.Printf("Model: %s\n", MODEL)
				fmt.Printf("Prompt: %s\n", PROMPT)
				if PROVIDER_TYPE == "proxy" {
					fmt.Printf("JWT Token: %s\n", func() string {
						if JWT_TOKEN != "" {
							return "***set***"
						}
						currentUser, _ := user.Current()
						jwtFile := currentUser.HomeDir + "/.proxy_jwt_token"
						if _, err := os.Stat(jwtFile); err == nil {
							return "***from file***"
						}
						return "***not set***"
					}())
				}
				return nil
			},
		},
		{
			Name:    "history",
			Aliases: []string{"hist"},
			Usage:   "Show command history",
			Action: func(c *cli.Context) error {
				showHistory()
				return nil
			},
		},
	}
}

func executeMain(file, system, commandInput string) {
	if file != "" {
		if err := reader.FileToPrompt(&commandInput, file); err != nil {
			printColored(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v\n", err), colorRed)
			return
		}
	}

	if _, err := os.Stat(RESULT_FOLDER); os.IsNotExist(err) {
		if err := os.MkdirAll(RESULT_FOLDER, 0755); err != nil {
			printColored(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %v\n", err), colorRed)
			return
		}
	}

	gpt3 := initGPT(system)

	printColored("ü§ñ –ó–∞–ø—Ä–æ—Å: ", colorCyan)
	fmt.Printf("%s\n", commandInput)

	response, elapsed := getCommand(gpt3, commandInput)
	if response == "" {
		printColored("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API.\n", colorRed)
		return
	}

	printColored(fmt.Sprintf("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ %.2f —Å–µ–∫\n", elapsed), colorGreen)
	printColored("\nüìã –ö–æ–º–∞–Ω–¥–∞:\n", colorYellow)
	printColored(fmt.Sprintf("   %s\n\n", response), colorBold+colorGreen)

	saveToHistory(commandInput, response)
	handlePostResponse(response, gpt3, system, commandInput)
}

func initGPT(system string) gpt.Gpt3 {
	currentUser, _ := user.Current()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º JWT —Ç–æ–∫–µ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
	var jwtToken string
	if PROVIDER_TYPE == "proxy" {
		jwtToken = JWT_TOKEN
		if jwtToken == "" {
			// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
			jwtFile := currentUser.HomeDir + "/.proxy_jwt_token"
			if data, err := os.ReadFile(jwtFile); err == nil {
				jwtToken = strings.TrimSpace(string(data))
			}
		}
	}

	return *gpt.NewGpt3(PROVIDER_TYPE, HOST, jwtToken, MODEL, system, 0.01)
}

func getCommand(gpt3 gpt.Gpt3, cmd string) (string, float64) {
	gpt3.InitKey()
	start := time.Now()
	done := make(chan bool)

	go func() {
		loadingChars := []string{"‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"}
		i := 0
		for {
			select {
			case <-done:
				fmt.Printf("\r%s", strings.Repeat(" ", 50))
				fmt.Print("\r")
				return
			default:
				fmt.Printf("\r%s –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...", loadingChars[i])
				i = (i + 1) % len(loadingChars)
				time.Sleep(100 * time.Millisecond)
			}
		}
	}()

	response := gpt3.Completions(cmd)
	done <- true
	elapsed := math.Round(time.Since(start).Seconds()*100) / 100

	return response, elapsed
}

func handlePostResponse(response string, gpt3 gpt.Gpt3, system, cmd string) {
	fmt.Printf("–î–µ–π—Å—Ç–≤–∏—è: (c)–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, (s)—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, (r)–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, (e)–≤—ã–ø–æ–ª–Ω–∏—Ç—å, (n)–Ω–∏—á–µ–≥–æ: ")
	var choice string
	fmt.Scanln(&choice)

	switch strings.ToLower(choice) {
	case "c":
		clipboard.WriteAll(response)
		fmt.Println("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
	case "s":
		saveResponse(response, gpt3, cmd)
	case "r":
		fmt.Println("üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é...")
		executeMain("", system, cmd)
	case "e":
		executeCommand(response)
	default:
		fmt.Println(" –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
	}
}

func saveResponse(response string, gpt3 gpt.Gpt3, cmd string) {
	timestamp := time.Now().Format("2006-01-02_15-04-05")
	filename := fmt.Sprintf("gpt_request_%s_%s.md", gpt3.Model, timestamp)
	filePath := path.Join(RESULT_FOLDER, filename)
	content := fmt.Sprintf("## Prompt:\n\n%s\n\n## Response:\n\n%s\n", cmd+". "+gpt3.Prompt, response)

	if err := os.WriteFile(filePath, []byte(content), 0644); err != nil {
		fmt.Println("Failed to save response:", err)
	} else {
		fmt.Printf("Response saved to %s\n", filePath)
	}
}

func executeCommand(command string) {
	fmt.Printf("üöÄ –í—ã–ø–æ–ª–Ω—è—é: %s\n", command)
	fmt.Print("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
	var confirm string
	fmt.Scanln(&confirm)

	if strings.ToLower(confirm) == "y" || strings.ToLower(confirm) == "yes" {
		cmd := exec.Command("bash", "-c", command)
		cmd.Stdout = os.Stdout
		cmd.Stderr = os.Stderr

		if err := cmd.Run(); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", err)
		} else {
			fmt.Println("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
		}
	} else {
		fmt.Println("‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
	}
}

func getEnv(key, defaultValue string) string {
	if value, exists := os.LookupEnv(key); exists {
		return value
	}
	return defaultValue
}

type CommandHistory struct {
	Command   string
	Response  string
	Timestamp time.Time
}

var commandHistory []CommandHistory

func saveToHistory(cmd, response string) {
	commandHistory = append(commandHistory, CommandHistory{
		Command:   cmd,
		Response:  response,
		Timestamp: time.Now(),
	})

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∫–æ–º–∞–Ω–¥–∞–º–∏
	if len(commandHistory) > 100 {
		commandHistory = commandHistory[1:]
	}
}

func showHistory() {
	if len(commandHistory) == 0 {
		printColored("üìù –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞\n", colorYellow)
		return
	}

	printColored("üìù –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥:\n", colorYellow)
	for i, hist := range commandHistory {
		fmt.Printf("%d. %s ‚Üí %s (%s)\n",
			i+1,
			hist.Command,
			hist.Response,
			hist.Timestamp.Format("15:04:05"))
	}
}

func printColored(text, color string) {
	fmt.Printf("%s%s%s", color, text, colorReset)
}

func showTips() {
	printColored("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:\n", colorCyan)
	fmt.Println("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --file –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞")
	fmt.Println("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --sys –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")
	fmt.Println("   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ 'history' –ø–æ–∫–∞–∂–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤")
	fmt.Println("   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ 'config' –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
	fmt.Println("   ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞ 'health' –ø—Ä–æ–≤–µ—Ä–∏—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API")
}
