#!/bin/bash

# üöÄ LCG Full Build Script
# –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å–±–æ—Ä–∫–∏: –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã + Docker –æ–±—Ä–∞–∑

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã

REPOSITORY=${1:-"kuznetcovay/lcg"}
VERSION=${2:-""}
PLATFORMS=${3:-"linux/amd64,linux/arm64"}

if [ -z "$VERSION" ]; then
    error "–í–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <repository> <version> <platforms>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 kuznetcovay/lcg v1.0.0 linux/amd64,linux/arm64"
    exit 1
fi

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –≤ —Ñ–∞–π–ª VERSION.txt (–≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞)
cd "$(dirname "$0")/.."
echo "$VERSION" > VERSION.txt
log "üìù –í–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ VERSION.txt: $VERSION"

log "üöÄ –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ LCG (–±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã + Docker –æ–±—Ä–∞–∑)..."

# –≠—Ç–∞–ø 1: –°–±–æ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
log "üì¶ –≠—Ç–∞–ø 1: –°–±–æ—Ä–∫–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å goreleaser..."
if ! ./deploy/4.build-binaries.sh "$VERSION"; then
    error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
    exit 1
fi

success "‚úÖ –ë–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"

# –≠—Ç–∞–ø 2: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞
log "üê≥ –≠—Ç–∞–ø 2: –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
if ! ./deploy/5.build-docker.sh "$REPOSITORY" "$VERSION" "$PLATFORMS"; then
    error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ Docker –æ–±—Ä–∞–∑–∞"
    exit 1
fi

success "‚úÖ Docker –æ–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ"

# –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è deployment.yaml
log "üìù –≠—Ç–∞–ø 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è deployment.yaml..."
# Generate deployment.yaml with env substitution
export REPOSITORY=$REPOSITORY
export VERSION=$VERSION
export PLATFORMS=$PLATFORMS
export KUBECONFIG="${HOME}/.kube/config_hlab" && kubectx default

if ! envsubst < deploy/1.configmap.tmpl.yaml > kustomize/configmap.yaml; then
    error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ deploy/1.configmap.yaml"
    exit 1
fi

success "‚úÖ kustomize/configmap.yaml —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"

if ! envsubst < deploy/deployment.tmpl.yaml > kustomize/deployment.yaml; then
    error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kustomize/deployment.yaml"
    exit 1
fi
success "‚úÖ kustomize/deployment.yaml —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"

if ! envsubst < deploy/ingress-route.tmpl.yaml > kustomize/ingress-route.yaml; then
    error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kustomize/ingress-route.yaml"
    exit 1
fi
success "‚úÖ kustomize/ingress-route.yaml —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"

if ! envsubst < deploy/service.tmpl.yaml > kustomize/service.yaml; then
    error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kustomize/service.yaml"
    exit 1
fi
success "‚úÖ kustomize/service.yaml —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"

if ! envsubst < deploy/kustomization.tmpl.yaml > kustomize/kustomization.yaml; then
    error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ kustomize/kustomization.yaml"
    exit 1
fi
success "‚úÖ kustomize/kustomization.yaml —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ"

# –æ—Ç–∫–ª—é—á–∏—Ç—å reconciliation flux
if kubectl get kustomization lcg -n flux-system > /dev/null 2>&1; then
    kubectl patch kustomization lcg -n flux-system --type=merge -p '{"spec":{"suspend":true}}'
else
    echo "‚ÑπÔ∏è  Kustomization 'lcg' does not exist in 'flux-system' namespace. Skipping suspend."
fi
sleep 5


# –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ main
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$current_branch" != "main" ]; then
    log "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–µ: $current_branch"
    # —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–∂–µ —Å–¥–µ–ª–∞–Ω—ã
    git add .
    git commit -m "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≤–µ—Ç–∫–µ $current_branch"
fi

# –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É main –∏ —Å–ª–∏—Ç—å —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–æ–π, –µ—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ main
if [ "$current_branch" != "main" ]; then
    git checkout main
    git merge --no-ff -m "Merged branch '$current_branch' into main while building $VERSION" "$current_branch"
elif [ "$current_branch" = "main" ]; then
    log "üîÑ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≤–µ—Ç–∫–µ main. –°–ª–∏—è–Ω–∏–µ —Å release..."
    git add .
    git commit -m "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –≤–µ—Ç–∫–µ $current_branch"
fi

# –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–µ—Ç–∫—É release –∏ —Å–ª–∏—Ç—å —Å –≤–µ—Ç–∫–æ–π main
git checkout release
git merge --no-ff -m "Merged main into release while building $VERSION" main

# –µ—Å–ª–∏ —Ç–µ–≥ $VERSION —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—à–∏—Ç—å
tag_exists=$(git tag -l "$VERSION")
if [ "$tag_exists" ]; then
    log "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–µ–≥–∞ $VERSION"
    git tag -d "$VERSION"
    git push origin ":refs/tags/$VERSION"
fi

# Create tag $VERSION and push to remote release branch and all tags
git tag "$VERSION"
git push origin release
git push origin --tags

# Push main branch
git checkout main
git push origin main


# –í–∫–ª—é—á–∏—Ç—å reconciliation flux
if kubectl get kustomization lcg -n flux-system > /dev/null 2>&1; then
    kubectl patch kustomization lcg -n flux-system --type=merge -p '{"spec":{"suspend":false}}'
else
    echo "‚ÑπÔ∏è  Kustomization 'lcg' does not exist in 'flux-system' namespace. Skipping suspend."
fi
echo "üîÑ Flux will automatically deploy $VERSION version in ~4-6 minutes..."

# –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
echo ""
log "üéâ –ü–æ–ª–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
echo ""
log "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:"
echo "  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPOSITORY"
echo "  –í–µ—Ä—Å–∏—è: $VERSION"
echo "  –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: $PLATFORMS"
echo "  –¢–µ–≥–∏: $REPOSITORY:$VERSION, $REPOSITORY:latest"
echo ""
echo ""
log "üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ git –∫–æ–º–º–∏—Ç–∞—Ö:"
git_log=$(git log release -1 --pretty=format:"%H - %s")
echo "$git_log"
echo ""


log "üìù –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"
echo "  docker pull $REPOSITORY:$VERSION"
echo "  docker run -p 8080:8080 $REPOSITORY:$VERSION"
echo "  docker buildx imagetools inspect $REPOSITORY:$VERSION"
echo ""
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞:"
echo "  docker run --rm $REPOSITORY:$VERSION /app/lcg --version"
echo ""
log "üìù –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:"
echo "  kubectl apply -k kustomize"
echo "  kubectl get pods"
echo "  kubectl get services"
echo "  kubectl get ingress"
echo "  kubectl get hpa"
echo "  kubectl get servicemonitor"
echo "  kubectl get pods"
echo "  kubectl get services"
echo "  kubectl get ingress"
echo "  kubectl get hpa"
echo "  kubectl get servicemonitor"
