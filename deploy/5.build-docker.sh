#!/bin/bash

# üê≥ LCG Docker Build Script
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –±–∏–Ω–∞—Ä–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
REPOSITORY=${1:-"your-registry.com/lcg"}
VERSION=${2:-""}
PLATFORMS=${3:-"linux/amd64,linux/arm64"}

if [ -z "$VERSION" ]; then
    error "–í–µ—Ä—Å–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <repository> <version>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 your-registry.com/lcg v1.0.0 <platforms>"
    exit 1
fi

log "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ LCG..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docker buildx
if ! docker buildx version &> /dev/null; then
    error "Docker Buildx –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Buildx –¥–ª—è –º—É–ª—å—Ç–∏–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–π —Å–±–æ—Ä–∫–∏."
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ –∫–æ—Ä–Ω—è)
if [ ! -d "dist" ]; then
    error "–ü–∞–ø–∫–∞ dist/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    echo "  ./deploy/4.build-binaries.sh $VERSION"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
MISSING_BINARIES=()

# –ò—â–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã —Å –≤–µ—Ä—Å–∏–µ–π –≤ –∏–º–µ–Ω–∏
AMD64_BINARY=$(find dist -name "*linux_amd64*" -type d | head -1)
echo "AMD64_BINARY: $AMD64_BINARY"
ARM64_BINARY=$(find dist -name "*linux_arm64*" -type d | head -1)
echo "ARM64_BINARY: $ARM64_BINARY"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–µ—Ä—Å–∏–∏
if [ -n "$AMD64_BINARY" ]; then
    AMD64_FILE=$(find "$AMD64_BINARY" -name "lcg_*" -type f | head -1)
    if [ -z "$AMD64_FILE" ]; then
        AMD64_BINARY=""
    else
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        FILE_VERSION=$(basename "$AMD64_FILE" | sed 's/lcg_//' | sed 's/-SNAPSHOT.*//')
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v' –µ—Å–ª–∏ –µ—Å—Ç—å)
        NORMALIZED_FILE_VERSION=$(echo "$FILE_VERSION" | sed 's/^v//')
        NORMALIZED_VERSION=$(echo "$VERSION" | sed 's/^v//')
        if [ "$NORMALIZED_FILE_VERSION" != "$NORMALIZED_VERSION" ]; then
            error "–í–µ—Ä—Å–∏—è –≤ –∏–º–µ–Ω–∏ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ($FILE_VERSION) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π ($VERSION)"
            echo "–§–∞–π–ª: $AMD64_FILE"
            echo "–û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: $VERSION"
            echo "–í–µ—Ä—Å–∏—è –≤ —Ñ–∞–π–ª–µ: $FILE_VERSION"
            exit 1
        fi
    fi
fi

if [ -n "$ARM64_BINARY" ]; then
    ARM64_FILE=$(find "$ARM64_BINARY" -name "lcg_*" -type f | head -1)
    if [ -z "$ARM64_FILE" ]; then
        ARM64_BINARY=""
    else
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        FILE_VERSION=$(basename "$ARM64_FILE" | sed 's/lcg_//' | sed 's/-SNAPSHOT.*//')
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 'v' –µ—Å–ª–∏ –µ—Å—Ç—å)
        NORMALIZED_FILE_VERSION=$(echo "$FILE_VERSION" | sed 's/^v//')
        NORMALIZED_VERSION=$(echo "$VERSION" | sed 's/^v//')
        if [ "$NORMALIZED_FILE_VERSION" != "$NORMALIZED_VERSION" ]; then
            error "–í–µ—Ä—Å–∏—è –≤ –∏–º–µ–Ω–∏ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ($FILE_VERSION) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π ($VERSION)"
            echo "–§–∞–π–ª: $ARM64_FILE"
            echo "–û–∂–∏–¥–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: $VERSION"
            echo "–í–µ—Ä—Å–∏—è –≤ —Ñ–∞–π–ª–µ: $FILE_VERSION"
            exit 1
        fi
    fi
fi

if [ -z "$AMD64_BINARY" ]; then
    MISSING_BINARIES+=("linux/amd64")
fi
if [ -z "$ARM64_BINARY" ]; then
    MISSING_BINARIES+=("linux/arm64")
fi

if [ ${#MISSING_BINARIES[@]} -gt 0 ]; then
    error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º: ${MISSING_BINARIES[*]}"
    echo "–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–∏—Ç–µ –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã:"
    echo "  ./4.build-binaries.sh $VERSION"
    exit 1
fi

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –∏—Ö –≤–µ—Ä—Å–∏–∏
log "üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã:"
if [ -n "$AMD64_FILE" ]; then
    echo "  AMD64: $AMD64_FILE"
fi
if [ -n "$ARM64_FILE" ]; then
    echo "  ARM64: $ARM64_FILE"
fi

# –°–æ–∑–¥–∞–µ–º builder –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
log "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker Buildx..."
docker buildx create --name lcg-builder --use 2>/dev/null || docker buildx use lcg-builder

# –ö–æ–ø–∏—Ä—É–µ–º –±–∏–Ω–∞—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ —Ñ–∞–π–ª –≤–µ—Ä—Å–∏–∏ –≤ –ø–∞–ø–∫—É deploy
log "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–Ω–∞—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏..."
cp -r dist ./deploy/dist
cp VERSION.txt ./deploy/VERSION.txt 2>/dev/null || echo "dev" > ./deploy/VERSION.txt

# –°–±–æ—Ä–∫–∞ –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
log "üèóÔ∏è  –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º: $PLATFORMS"
log "üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPOSITORY"
log "üè∑Ô∏è  –í–µ—Ä—Å–∏—è: $VERSION"

# –°–±–æ—Ä–∫–∞ –∏ push
docker buildx build \
    --platform "$PLATFORMS" \
    --tag "$REPOSITORY:$VERSION" \
    --tag "$REPOSITORY:latest" \
    --push \
    --file deploy/Dockerfile \
    deploy/

# –û—á–∏—â–∞–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
rm -rf ./deploy/dist

success "üéâ –û–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—Ä–∞–Ω–Ω–æ–º –æ–±—Ä–∞–∑–µ
log "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—Ä–∞–Ω–Ω–æ–º –æ–±—Ä–∞–∑–µ:"
echo "  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPOSITORY"
echo "  –í–µ—Ä—Å–∏—è: $VERSION"
echo "  –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: $PLATFORMS"
echo "  –¢–µ–≥–∏: $REPOSITORY:$VERSION, $REPOSITORY:latest"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏..."
docker buildx imagetools inspect "$REPOSITORY:$VERSION" || warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–∑ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"

success "üéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
echo ""
log "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "  docker pull $REPOSITORY:$VERSION"
echo "  docker run -p 8080:8080 $REPOSITORY:$VERSION"
echo "  docker buildx imagetools inspect $REPOSITORY:$VERSION"
